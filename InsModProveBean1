/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package it.cidsoftware.sita.bean.lims.tabelleBase;

//BD
import com.cid.sita.bd.EsameBD;
import com.cid.sita.bd.EsameBDException;
import com.cid.sita.bd.MetodoMisuraBD;
import com.cid.sita.bd.MetodoMisuraBDException;
import com.cid.sita.bd.StrutturaAmministrativaBD;
import com.cid.sita.bd.StrutturaAmministrativaBDException;
import com.cid.sita.bd.UnitaMisuraBD;
import com.cid.sita.bd.UnitaMisuraBDException;
import com.cid.sita.bd.esame.EsameDTOModel;
import com.cid.sita.bd.esame.EsameMetodoExtModel;
import com.cid.sita.bd.esame.EsameMetodoMatriceDTOModel;
import com.cid.sita.bd.esame.EsameMetodoModel;
import com.cid.sita.bd.esame.MatriceModel;
import com.cid.sita.bd.esame.ProfiloAnaliticoModel;
import com.cid.sita.bd.fasilaboratorio.FaseLabDTOModel;
import com.cid.sita.bd.metodomisura.MetodoMisuraModel;
import com.cid.sita.bd.strutturaamministrativa.StrutturaAmministrativaModel;
import com.cid.sita.bd.tipologiafase.TipologiaFaseModel;
import com.cid.sita.bd.unitamisura.UnitaMisuraModel;

import it.cidsoftware.sita.bean.lims.AttivitaDiCampoBean;
import it.cidsoftware.sita.bean.lims.GestioneMisureParametriCampoBean;

//utils
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;

//extra
import it.cidsoftware.sita.bean.login.UserData;
import it.cidsoftware.sita.faces.util.AbstractPageBean;
import it.cidsoftware.sita.faces.util.JSFUtils;
import java.io.Serializable;
import javax.annotation.PostConstruct;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import org.apache.commons.lang3.StringUtils;

@ManagedBean(name = "insModProveBean")
@ViewScoped
public class InsModProveBean extends AbstractPageBean implements Serializable {

    //Models
    private EsameDTOModel esameModel = new EsameDTOModel();
    private MetodoMisuraModel nuovoMetodo = new MetodoMisuraModel();
    private EsameDTOModel nuovaProva = new EsameDTOModel();
    private ProfiloAnaliticoModel nuovoProfilo = new ProfiloAnaliticoModel();
    //liste
    private List<MatriceModel> elencoMatrici = new ArrayList<>();
    private List<MatriceModel> listaMatriciDisponibili = new ArrayList<>();
    private List<MatriceModel> listaMatriciDisponibiliMod = new ArrayList<>();
    private StrutturaAmministrativaModel[] listaStruttura = new StrutturaAmministrativaModel[0];
    private MetodoMisuraModel[] listaMetodiMisura = new MetodoMisuraModel[0];
    private ProfiloAnaliticoModel[] listaProfili = new ProfiloAnaliticoModel[0];
    private UnitaMisuraModel[] listaUnitaMisura = new UnitaMisuraModel[0];
    private EsameMetodoExtModel[] listaMetodiParametriLaboratorio = new EsameMetodoExtModel[0];
    private EsameDTOModel[] listaProve = new EsameDTOModel[0];

    //ins e mod
    private EsameMetodoExtModel selectedMetodo = new EsameMetodoExtModel();
    private EsameMetodoExtModel selectedMetodoIns = new EsameMetodoExtModel();

    //utils
    private UserData userData = JSFUtils.getuserData();
    private HttpSession session = JSFUtils.getSession();

    //variables
    private long idDipartimento = 0;
    private Long idStrutturaDaCarta;
    private Long matriceDaCarta;
    private String denominazioneStrutturaSelezionata;
    private String descrizioneMatriceSelezionata;
    private boolean boolInserimento = false;
    private boolean boolModifica = false;
    private boolean boolDipartimentoInserito = false;
    private boolean boolTablePre = false;
    private boolean boolGestioneParametri = false;
    private MetodoMisuraModel metodoSelezionato;
    private EsameDTOModel provaSelezionata;
    private ProfiloAnaliticoModel profiloSelezionato;

    public InsModProveBean() {

    }

    @PostConstruct
    public void initialize() {

        //Logica per recuperare idStruttura,idMatrice e idEsame da cartaServizi
        String idEsame = ((HttpServletRequest) FacesContext.getCurrentInstance().getExternalContext().getRequest()).getParameter("idEsame");
        if (idEsame != null && !StringUtils.isEmpty(idEsame)) {
            try {
                EsameBD esameBD = new EsameBD();
                esameModel = esameBD.cercaPerPk(Long.parseLong(idEsame), JSFUtils.getLoggedUser());
            } catch (EsameBDException ex) {
                Logger.getLogger(InsModProveBean.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        ExternalContext externalContext = FacesContext.getCurrentInstance().getExternalContext();
        Map<String, Object> sessionMap = FacesContext.getCurrentInstance().getExternalContext().getSessionMap();

        Object struttura = sessionMap.get("idStruttura");
        Object matrice = sessionMap.get("idMatrice");

        if (struttura != null) {
            this.setIdStrutturaDaCarta((Long) struttura);
        }

        if (matrice != null) {
            this.setMatriceDaCarta((Long) matrice);
        }
        // Recupera denominazione struttura
        for (StrutturaAmministrativaModel s : listaStruttura) {
            if (Long.valueOf(s.getIdStruttura()).equals(getIdStrutturaDaCarta())) {
                this.setDenominazioneStrutturaSelezionata(s.getDenominazione());
                break;
            }
        }
        // Recupera descrizione matrice
        for (MatriceModel m : listaMatriciDisponibili) {
            if (Long.valueOf(m.getIdMatrice()).equals(getMatriceDaCarta())) {
                this.setDescrizioneMatriceSelezionata(m.getDescrizione());
                break;
            }
        }

        //carica dati
        caricaUnitaMisura();
        caricaMetodi();
        caricaDipartimenti();
        caricaMatrici();
        caricaMetodiParametriLaboratorio();
        caricaProve();

        //gestisce inserimento e modifica
        FacesContext fc = FacesContext.getCurrentInstance();
        Map<String, String> params = fc.getExternalContext().getRequestParameterMap();
        String editMode = params.get("editMode");

        if ("2".equals(editMode)) {
            boolModifica = false;
            boolInserimento = false;
        } else {
            boolInserimento = true;
            boolModifica = false;
        }
    }

    //Inizio metodi carica
    
    public void caricaProve() {
        EsameBD bd = new EsameBD();
        try {
            listaProve = bd.caricaProveSingole(0, 0, "", JSFUtils.getLoggedUser());
            System.out.println("le prove sono:" + listaProve);
        } catch (EsameBDException ex) {
            Logger.getLogger(InsModProveBean.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void caricaMetodiParametriLaboratorio() {
        try {
            if (idStrutturaDaCarta != null && idStrutturaDaCarta > 0) {
                idDipartimento = idStrutturaDaCarta;
            }

            System.out.println("=== caricaMetodiParametriLaboratorio ===");
            System.out.println("idStrutturaDaCarta: " + idStrutturaDaCarta);
            System.out.println("idDipartimento: " + idDipartimento);
            System.out.println("esameModel: " + (esameModel != null ? esameModel.getIdEsame() : "null"));
            System.out.println("matriceDaCarta: " + matriceDaCarta);

            if (esameModel != null && esameModel.getIdEsame() > 0 && idDipartimento > 0) {
                boolDipartimentoInserito = true;
                EsameBD esameBD = new EsameBD();
                caricaMatrici();  // Assumo popola elencoMatrici

                EsameMetodoExtModel[] arrayMetodi = esameBD.caricaMetodiPerEsame(
                        idDipartimento,
                        esameModel.getIdEsame(),
                        JSFUtils.getLoggedUser()
                );

                System.out.println("Totale metodi caricati: " + arrayMetodi.length);

                if (matriceDaCarta != null && matriceDaCarta > 0) {
                    String descrizioneMatriceDaCarta = null;
                    for (MatriceModel m : elencoMatrici) {
                        if (matriceDaCarta.equals(m.getIdMatrice())) {
                            descrizioneMatriceDaCarta = m.getDescrizione();
                            break;
                        }
                    }

                    if (descrizioneMatriceDaCarta != null) {
                        final String descrizioneFiltro = descrizioneMatriceDaCarta; // final per lambda

                        List<EsameMetodoExtModel> filtered = Arrays.stream(arrayMetodi)
                                .filter(elem -> elem.getMatrice() != null
                                && descrizioneFiltro.equals(elem.getMatrice()))
                                .collect(Collectors.toList());

                        listaMetodiParametriLaboratorio = filtered.toArray(new EsameMetodoExtModel[0]);
                    } else {
                        System.out.println("Descrizione matriceDaCarta non trovata, nessun filtro applicato.");
                        listaMetodiParametriLaboratorio = arrayMetodi;
                    }
                } else {
                    listaMetodiParametriLaboratorio = arrayMetodi;
                    System.out.println("Nessun filtro matrice applicato, metodi in lista: " + listaMetodiParametriLaboratorio.length);
                }

                caricaProfiliAnalitici();

            } else {
                boolDipartimentoInserito = false;
                listaMetodiParametriLaboratorio = new EsameMetodoExtModel[0];
                warn("Selezionare il Dipartimento!");
            }

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void caricaMetodi() {
        MetodoMisuraBD metodoBD = new MetodoMisuraBD();
        try {

            listaMetodiMisura = metodoBD.findAll(JSFUtils.getLoggedUser());

        } catch (MetodoMisuraBDException ex) {
            Logger.getLogger(InsModProveBean.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void caricaMatrici() {
        try {
            elencoMatrici = new ArrayList<>();
            EsameBD esBD = new EsameBD();

            MatriceModel[] elenco = esBD.caricaMatriciCartaDeiServizi(idDipartimento, JSFUtils.getLoggedUser());

            if (elenco != null && elenco.length > 0) {
                elencoMatrici = Arrays.asList(elenco);
            }

        } catch (EsameBDException ex) {
            Logger.getLogger(InsModProveBean.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void caricaProfiliAnalitici() {
        try {

            EsameBD esBD = new EsameBD();
            listaProfili = esBD.caricaProfiliAnalitici(0L, "", "", idDipartimento, JSFUtils.getLoggedUser());

        } catch (EsameBDException ex) {
            Logger.getLogger(InsModProveBean.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void caricaDipartimenti() {

        StrutturaAmministrativaBD strAmmBD = new StrutturaAmministrativaBD();
        try {
            setListaStruttura(strAmmBD.caricaDipartimenti(JSFUtils.getLoggedUser()));
        } catch (StrutturaAmministrativaBDException ex) {
            Logger.getLogger(AttivitaDiCampoBean.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void caricaUnitaMisura() {
        UnitaMisuraBD unitaMisuraBD = new UnitaMisuraBD();
        try {

            listaUnitaMisura = unitaMisuraBD.cerca("", "", "", "", JSFUtils.getLoggedUser());

        } catch (UnitaMisuraBDException ex) {
            Logger.getLogger(GestioneMisureParametriCampoBean.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    //fine metodi carica
    
    
    public void salvaNuovaProva() {
        System.out.println("SALVA ESEGUITO");
//        if (getNuovaProva() != null && getNuovaProva().getMnemonico() != null && !nuovaProva.getMnemonico().isEmpty()) {
            List<EsameDTOModel> proveList = new ArrayList<>(Arrays.asList(listaProve));
        System.out.println("POST CONDITION");   
            // Simula ID fittizio
            getNuovaProva().setIdEsame(System.currentTimeMillis());

            proveList.add(getNuovaProva());
            listaProve = proveList.toArray(new EsameDTOModel[0]);

            System.out.println("Nuova prova aggiunta: " + getNuovaProva().getMnemonico());

            setNuovaProva(new EsameDTOModel()); // reset form
//        }
    }

    public void salvaNuovoMetodo() {
        System.out.println("Salvataggio nuovo metodo: " + getNuovoMetodo().getCodice());

        List<MetodoMisuraModel> metodiList = new ArrayList<>(Arrays.asList(listaMetodiMisura));

        metodiList.add(getNuovoMetodo());
        listaMetodiMisura = metodiList.toArray(new MetodoMisuraModel[0]);
        setNuovoMetodo(new MetodoMisuraModel());
        System.out.println("Salvataggio nuovo metodo2: " + getNuovoMetodo().getCodice());
        System.out.println("Salvataggio nuovo metodo2: " + getNuovoMetodo().getDescrizione());
    }

    public void salvaNuovoProfilo() {
        // Salvo la descrizione e codice correnti per il log
        System.out.println("Descrizione nuovo profilo: " + getNuovoProfilo().getDescrizione());
        System.out.println("Codice nuovo profilo: " + getNuovoProfilo().getCodice());

        List<ProfiloAnaliticoModel> profiliList = new ArrayList<>(Arrays.asList(listaProfili));

        profiliList.add(getNuovoProfilo());  // Aggiungo quello attuale
        listaProfili = profiliList.toArray(new ProfiloAnaliticoModel[0]);

        setNuovoProfilo(new ProfiloAnaliticoModel());  // Resetto per il prossimo inserimento
    }

    //inizio ins e mod
    
    public void abilitaInserimento() {
        selectedMetodoIns = new EsameMetodoExtModel();
        selectedMetodoIns.setIdEsame(esameModel.getIdEsame());
        listaMatriciDisponibili = elencoMatrici;
        boolInserimento = true;

    }

    public void abilitaModifica(EsameMetodoExtModel tmp) {
        selectedMetodo = new EsameMetodoExtModel();
        selectedMetodo = tmp;
        listaMatriciDisponibiliMod = new ArrayList<>();
        for (MatriceModel tmpD : elencoMatrici) {
            boolean trovato = false;
            for (MatriceModel tmpM : selectedMetodo.getListaMatrice()) {
                if (tmpD.getIdMatrice() == tmpM.getIdMatrice()) {
                    trovato = true;
                    break;
                }
            }

            if (!trovato) {
                listaMatriciDisponibiliMod.add(tmpD);
            }
        }
        boolModifica = true;
    }

    public void annullaInserimento() {
        boolInserimento = false;
        selectedMetodoIns = new EsameMetodoExtModel();
        selectedMetodoIns.setListaMatrice(new ArrayList<>());
    }

    public void annullaModifica() {
        boolModifica = false;
        selectedMetodo = new EsameMetodoExtModel();
    }

    //fine ins e mod
    
    //metodi per il salvataggio
    public void salvaInserimento() {

        String mess = validate();
        if (!StringUtils.isEmpty(mess)) {
            error("Errore: " + mess);
            return;
        }

        EsameBD esameBD = new EsameBD();
        try {

            selectedMetodoIns.setIdDipartimento(idDipartimento);
            selectedMetodoIns.setDataCreate(new Date());
            selectedMetodoIns.setUtente(JSFUtils.getLoggedUser());
            esameBD.inserisciEsameMetodoMatrici(selectedMetodoIns, JSFUtils.getLoggedUser());

            info("Inserimento avvenuto con successo");
            caricaMetodiParametriLaboratorio();

        } catch (EsameBDException ex) {
            Logger.getLogger(InsModProveBean.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

        boolInserimento = false;

    }

    public void salvaModifica() {

        String mess = validateMod();
        if (!StringUtils.isEmpty(mess)) {
            error("Errore: " + mess);
            return;
        }

        EsameBD esame = new EsameBD();
        try {

            selectedMetodo.setDataUpdate(new Date());
            selectedMetodo.setUtente(JSFUtils.getLoggedUser());
            esame.modificaEsameMetodoMatrici(selectedMetodo, JSFUtils.getLoggedUser());
            info("Modifica avvenuta con successo");
            caricaMetodiParametriLaboratorio();

        } catch (EsameBDException ex) {
            Logger.getLogger(InsModProveBean.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

        boolModifica = false;
    }

    //validators
    public String validate() {

        return idDipartimento <= 0 ? "Dipartimento non selezionato!"
                : (selectedMetodoIns.getListaMatrice() == null || selectedMetodoIns.getListaMatrice().isEmpty()) ? "Matrice/i non selezionata/e!"
                : selectedMetodoIns.getIdMetodo() <= 0 ? "Metodo non selezionato!"
                : selectedMetodoIns.getIdUnitaMisura() <= 0 ? "Unità Misura non selezionato!"
                : "";
    }

    public String validateMod() {

        return idDipartimento <= 0 ? "Dipartimento non selezionato!"
                : (selectedMetodo.getListaMatrice() == null || selectedMetodo.getListaMatrice().isEmpty()) ? "Matrice/i non selezionata/e!"
                : selectedMetodo.getIdMetodo() <= 0 ? "Metodo non selezionato!"
                : selectedMetodo.getIdUnitaMisura() <= 0 ? "Unità Misura non selezionato!"
                : "";
    }

   
    //--------------------------Set&Get--------------------------------
    public EsameDTOModel getProvaSelezionata() {
        if (selectedMetodoIns == null) {
            return null;
        }
        Long id = selectedMetodoIns.getIdEsame();
        if (id == null || id == -1) {
            return null;
        }
        for (EsameDTOModel e : listaProve) {
            if (id.equals(e.getIdEsame())) {
                return e;
            }
        }
        return null;
    }

    public void setProvaSelezionata(EsameDTOModel provaSelezionata) {
        this.provaSelezionata = provaSelezionata;
    }

    public UserData getUserData() {
        return userData;
    }

    public void setUserData(UserData userData) {
        this.userData = userData;
    }

    public HttpSession getSession() {
        return session;
    }

    public void setSession(HttpSession session) {
        this.session = session;
    }

    public boolean isBoolInserimento() {
        return boolInserimento;
    }

    public void setBoolInserimento(boolean boolInserimento) {
        this.boolInserimento = boolInserimento;
    }

    public boolean isBoolModifica() {
        return boolModifica;
    }

    public void setBoolModifica(boolean boolModifica) {
        this.boolModifica = boolModifica;
    }

    public EsameMetodoExtModel getSelectedMetodo() {
        return selectedMetodo;
    }

    public void setSelectedMetodo(EsameMetodoExtModel selectedMetodo) {
        this.selectedMetodo = selectedMetodo;
    }

    public UnitaMisuraModel[] getListaUnitaMisura() {
        return listaUnitaMisura;
    }

    public void setListaUnitaMisura(UnitaMisuraModel[] listaUnitaMisura) {
        this.listaUnitaMisura = listaUnitaMisura;
    }

    public List<MatriceModel> getElencoMatrici() {
        return elencoMatrici;
    }

    public void setElencoMatrici(List<MatriceModel> elencoMatrici) {
        this.elencoMatrici = elencoMatrici;
    }

    public EsameMetodoExtModel getSelectedMetodoIns() {
        return selectedMetodoIns;
    }

    public void setSelectedMetodoIns(EsameMetodoExtModel selectedMetodoIns) {
        this.selectedMetodoIns = selectedMetodoIns;
    }

    public long getIdDipartimento() {
        return idDipartimento;
    }

    public void setIdDipartimento(long idDipartimento) {
        this.idDipartimento = idDipartimento;
    }

    public MetodoMisuraModel[] getListaMetodiMisura() {
        return listaMetodiMisura;
    }

    public void setListaMetodiMisura(MetodoMisuraModel[] listaMetodiMisura) {
        this.listaMetodiMisura = listaMetodiMisura;
    }

    public EsameDTOModel getEsameModel() {
        return esameModel;
    }

    public void setEsameModel(EsameDTOModel esameModel) {
        this.esameModel = esameModel;
    }

    public EsameMetodoExtModel[] getListaMetodiParametriLaboratorio() {
        return listaMetodiParametriLaboratorio;
    }

    public void setListaMetodiParametriLaboratorio(EsameMetodoExtModel[] listaMetodiParametriLaboratorio) {
        this.listaMetodiParametriLaboratorio = listaMetodiParametriLaboratorio;
    }

    public StrutturaAmministrativaModel[] getListaStruttura() {
        return listaStruttura;
    }

    public void setListaStruttura(StrutturaAmministrativaModel[] listaStruttura) {
        this.listaStruttura = listaStruttura;
    }

    public boolean isBoolDipartimentoInserito() {
        return boolDipartimentoInserito;
    }

    public void setBoolDipartimentoInserito(boolean boolDipartimentoInserito) {
        this.boolDipartimentoInserito = boolDipartimentoInserito;
    }

    public boolean isBoolTablePre() {
        return boolTablePre;
    }

    public void setBoolTablePre(boolean boolTablePre) {
        this.boolTablePre = boolTablePre;
    }

    public List<MatriceModel> getListaMatriciDisponibili() {
        return listaMatriciDisponibili;
    }

    public void setListaMatriciDisponibili(List<MatriceModel> listaMatriciDisponibili) {
        this.listaMatriciDisponibili = listaMatriciDisponibili;
    }

    public List<MatriceModel> getListaMatriciDisponibiliMod() {
        return listaMatriciDisponibiliMod;
    }

    public void setListaMatriciDisponibiliMod(List<MatriceModel> listaMatriciDisponibiliMod) {
        this.listaMatriciDisponibiliMod = listaMatriciDisponibiliMod;
    }

    public boolean isBoolGestioneParametri() {
        return boolGestioneParametri;
    }

    public void setBoolGestioneParametri(boolean boolGestioneParametri) {
        this.boolGestioneParametri = boolGestioneParametri;
    }

    public ProfiloAnaliticoModel[] getListaProfili() {
        return listaProfili;
    }

    public void setListaProfili(ProfiloAnaliticoModel[] listaProfili) {
        this.listaProfili = listaProfili;
    }

    public Long getIdStrutturaDaCarta() {
        return idStrutturaDaCarta;
    }

    public void setIdStrutturaDaCarta(Long idStrutturaDaCarta) {
        this.idStrutturaDaCarta = idStrutturaDaCarta;
    }

    public Long getMatriceDaCarta() {
        return matriceDaCarta;
    }

    public void setMatriceDaCarta(Long matriceDaCarta) {
        this.matriceDaCarta = matriceDaCarta;
    }

    public String getDenominazioneStrutturaSelezionata() {
        return denominazioneStrutturaSelezionata;
    }

    public void setDenominazioneStrutturaSelezionata(String denominazioneStrutturaSelezionata) {
        this.denominazioneStrutturaSelezionata = denominazioneStrutturaSelezionata;
    }

    public String getDescrizioneMatriceSelezionata() {
        return descrizioneMatriceSelezionata;
    }

    public void setDescrizioneMatriceSelezionata(String descrizioneMatriceSelezionata) {
        this.descrizioneMatriceSelezionata = descrizioneMatriceSelezionata;
    }

    public EsameDTOModel[] getListaProve() {
        return listaProve;
    }

    public void setListaProve(EsameDTOModel[] listaProve) {
        this.listaProve = listaProve;
    }

    public EsameDTOModel getNuovaProva() {
        return nuovaProva;
    }

    public void setNuovaProva(EsameDTOModel nuovaProva) {
        this.nuovaProva = nuovaProva;
    }

    public MetodoMisuraModel getNuovoMetodo() {
        return nuovoMetodo;
    }

    public void setNuovoMetodo(MetodoMisuraModel nuovoMetodo) {
        this.nuovoMetodo = nuovoMetodo;
    }

    public MetodoMisuraModel getMetodoSelezionato() {
        if (selectedMetodoIns == null) {
            return null;
        }
        Long id = selectedMetodoIns.getIdMetodo();
        if (id == null || id == -1) {
            return null;
        }
        for (MetodoMisuraModel m : listaMetodiMisura) {
            if (id.equals(m.getIdMetodo())) {
                return m;
            }
        }
        return null;
    }

    public void setMetodoSelezionato(MetodoMisuraModel metodoSelezionato) {
        this.metodoSelezionato = metodoSelezionato;
    }

    public ProfiloAnaliticoModel getProfiloSelezionato() {
        return profiloSelezionato;
    }

    public void setProfiloSelezionato(ProfiloAnaliticoModel profiloSelezionato) {
        this.profiloSelezionato = profiloSelezionato;
    }

    public ProfiloAnaliticoModel getNuovoProfilo() {
        return nuovoProfilo;
    }

    public void setNuovoProfilo(ProfiloAnaliticoModel nuovoProfilo) {
        this.nuovoProfilo = nuovoProfilo;
    }

    public List<MatriceModel> getElencoMatriciFiltrato() {
        List<MatriceModel> risultato = new ArrayList<>();

        // Controllo se è selezionata una matrice valida
        if (matriceDaCarta <= 0) {
            return risultato;
        }

        for (MatriceModel m : elencoMatrici) {
            if (matriceDaCarta != null && matriceDaCarta.equals(m.getIdMatrice())) {
                risultato.add(m);
                break;
            }

        }

        return risultato;
    }

}
